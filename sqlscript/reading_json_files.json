{
	"name": "reading_json_files",
	"properties": {
		"folder": {
			"name": "query_data"
		},
		"content": {
			"query": "--Reading line-delimited JSON files (.JSONL)\n--JSON documents are separated with new-line character\nselect top 10 * \nfrom \n    openrowset( \n        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.jsonl', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows\n\n--Reading classic JSON files\nselect top 10 * \nfrom \n    openrowset( \n        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b', \n        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON \n    ) with (doc nvarchar(max)) as rows\n\n--Alternatively, you can define an external data source, instead of directly querying the file\ncreate external data source covid \nwith (location = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases');\ngo \nselect top 10 * \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.jsonl', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows \ngo \nselect top 10 * \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.json', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b', \n        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON \n    ) with (doc nvarchar(max)) as rows\n\n--Parse JSON documents\n/*\n{ \n    \"date_rep\":\"2020-07-24\", \n    \"day\":24,\n    \"month\":7,\n    \"year\":2020, \n    \"cases\":13,\n    \"deaths\":0, \n    \"countries_and_territories\":\"Afghanistan\", \n    \"geo_id\":\"AF\", \n    \"country_territory_code\":\"AFG\", \n    \"continent_exp\":\"Asia\",\n    \"load_date\":\"2020-07-25 00:05:14\", \n    \"iso_country\":\"AF\" \n}\n*/\nselect \n    JSON_VALUE(doc, '$.date_rep') AS date_reported, \n    JSON_VALUE(doc, '$.countries_and_territories') AS country, \n    JSON_VALUE(doc, '$.cases') as cases, \n    doc \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.jsonl', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows \norder by JSON_VALUE(doc, '$.geo_id') desc\n\n--Using OPENJSON\n--More informatin: https://docs.microsoft.com/en-us/sql/t-sql/functions/openjson-transact-sql?view=sql-server-ver15\nselect * \nfrom \n    openrowset( \n        bulk 'latest/ecdc_cases.jsonl', \n        data_source = 'covid', \n        format = 'csv', \n        fieldterminator ='0x0b', \n        fieldquote = '0x0b' \n    ) with (doc nvarchar(max)) as rows \n    cross apply openjson (doc) \n        with ( date_rep datetime2, \n                   cases int '$.cases', \n                   fatal int '$.deaths', \n                   country varchar(100) '$.countries_and_territories') \nwhere country = 'Serbia' \norder by country, date_rep desc;\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dp203",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}